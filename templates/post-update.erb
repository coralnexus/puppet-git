#!/bin/bash
#
# This hook does three things:
#
#  1. update the "info" files that allow the list of references to be
#     queried over dumb transports such as http
#
#  2. if this repository looks like it is a non-bare repository, and
#     the checked-out branch is pushed to, then update the working copy.
#     This makes "push" function somewhat similarly to darcs and bzr.
#
#  3. Run any extra commands specified.
#
# To enable this hook, make this file executable by "chmod +x post-update".
#
#-------------------------------------------------------------------------------
# Functions
#
function update_repository {
	cd $GIT_WORK_TREE
	
    ref=$1
        
    echo "Pushed to checked out branch $ref" >&2
    
    if (git diff-files -q --exit-code >/dev/null)
    then
        wc_dirty=0
    else
        echo "Unstaged changes found in working copy" >&2
        wc_dirty=1
        desc="working copy"
    fi
    
    if git diff-index --cached HEAD@{1} 2>/dev/null
    then
        index_dirty=0
    else
        echo "Uncommitted, staged changes found" >&2
        index_dirty=1
        if [ -n "$desc" ]
        then
            desc="$desc and index"
        else
            desc="index"
        fi
    fi
    
    if [ "$wc_dirty" -ne 0 -o "$index_dirty" -ne 0 ]
    then
        new=$(git rev-parse HEAD)
        
        echo "Stashing dirty $desc - see git-stash(1)" >&2
        ( 
            trap 'echo trapped $$; git symbolic-ref HEAD "'"$ref"'"' 2 3 13 15 ERR EXIT
            git update-ref --no-deref HEAD HEAD@{1} 2>/dev/null
            
            git stash save "Dirty $desc before update to $new";
            git symbolic-ref HEAD "$ref"
        )
    fi

    ( 
        git diff-index -R --name-status HEAD >&2
        
        echo "Updating working copy..." >&2
        git reset --hard HEAD
       
        echo "Updating submodules..." >&2
        git submodule sync
        git submodule update --init --recursive
    )
}

#---

function push_repository {
	cd $GIT_WORK_TREE
	
	ORIG_IFS="${IFS}"
    NIFS=$'\n'
	
	for REMOTE in `git remote 2> /dev/null` ; do
	   git config remote.${REMOTE}.url | grep git@
    
        if [ $? -eq 0 ]
        then
            git push --tags --all ${REMOTE}
        fi  	
    done
    
    IFS="${ORIG_IFS}"
}

#-------------------------------------------------------------------------------
# Begin...

git-update-server-info

is_bare=$(git config --get --bool core.bare)

if [ -z "$is_bare" ]
then
    # For compatibility's sake, guess.
    git_dir_full=$(cd $GIT_DIR; pwd)
    
    #echo "Full directory: $git_dir_full" >&2
    
    case $git_dir_full in 
    	*/.git) is_bare=false;; 
    	*) is_bare=true;; 
    esac
fi

if [ "$is_bare" = "false" ]
then	
	export GIT_DIR=$(cd $GIT_DIR; pwd)
	GIT_WORK_TREE=${GIT_WORK_TREE-..}
	
	active_branch=`git symbolic-ref HEAD 2> /dev/null`
 
    echo "Git directory: $GIT_DIR" >&2   
    echo "Active branch: $active_branch" >&2
	
	for ref
	do
		#echo "Ref: $ref" >&2
		if [ ! "$active_branch" -o "$ref" = "$active_branch" ]
		then
			( 
        update_repository $ref
                
<% @post_update_commands.each do |command| -%>
        <%= command %>
<% end -%>
                
        push_repository
      )
		fi
	done
fi
